generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------- ENUMS --------

enum UserRole {
  ADMIN
  GUEST
  USER
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum ReviewStatus {
  DRAFT
  PUBLISHED
  UNPUBLISHED
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

// -------- MODELS --------

model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  password           String
  name               String
  profilePhoto       String?
  role               UserRole   @default(USER)
  needPasswordChange Boolean    @default(true)
  status             UserStatus @default(ACTIVE)
  subscription       Boolean    @default(false)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  isDeleteAt         Boolean    @default(false)
  // Relations
  admin              Admin?
  guest              Guest?
  reviews            Review[]
  comments           Comment[]
  votes              Vote[]
  payments           Payment[]

  @@map("users")
}

model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  isDeleteAt    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  @@map("admins")
}

model Guest {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  isDeleteAt    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  @@map("guests")
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviews Review[]
  posts   Post[]

  @@map("categories")
}

model Post {
  id          String   @id @default(uuid())
  title       String
  description String
  categoryId  String
  authorId    String
  images      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category Category @relation(fields: [categoryId], references: [id])
  review   Review[]

  @@map("posts")
}

model Review {
  id             String       @id @default(uuid())
  title          String
  description    String
  rating         Int
  purchaseSource String?
  images         String[] // Cloudinary URLs
  isPremium      Boolean      @default(false)
  premiumPrice   Float?
  status         ReviewStatus @default(DRAFT)
  moderationNote String?
  categoryId     String
  userId         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  category Category  @relation(fields: [categoryId], references: [id])
  user     User      @relation(fields: [userId], references: [id])
  comments Comment[]
  votes    Vote[]
  payments Payment[]

  Post   Post?   @relation(fields: [postId], references: [id])
  postId String?

  @@map("reviews")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  reviewId  String
  userId    String
  parentId  String? // For nesting
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  review  Review    @relation(fields: [reviewId], references: [id])
  user    User      @relation(fields: [userId], references: [id])
  parent  Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentToComment")
}

model Vote {
  id        String   @id @default(uuid())
  type      VoteType
  reviewId  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  review Review @relation(fields: [reviewId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@unique([reviewId, userId])
}

model Payment {
  id            String        @id @default(uuid())
  email         String
  amount        Float
  status        PaymentStatus
  transactionId String?
  userId        String
  createdAt     DateTime      @default(now())

  user     User    @relation(fields: [userId], references: [id])
  Review   Review? @relation(fields: [reviewId], references: [id])
  reviewId String?
}

enum PaymentStatus {
  COMPLETEED
  FAILED
}
